{"version":3,"sources":["redux/ducks/item/item.js","redux/store.js","components/Items.js","components/App.js","serviceWorker.js","index.js"],"names":["initialState","items","state","action","type","payload","getItems","dispatch","axios","get","then","resp","data","useItems","useDispatch","useSelector","appState","itemState","useEffect","add","text","post","status","addItem","del","id","delete","deleteItem","toggle","patch","toggleItem","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","reducers","enhancer","applyMiddleware","thunk","store","createStore","props","useState","item","setItem","className","onSubmit","e","preventDefault","onChange","target","value","placeholder","map","key","onClick","Store","Boolean","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qVASMA,EAAe,CACnBC,MAAO,IAIM,aAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCAC/C,OAAQA,EAAOC,MACb,IAVc,iBAWZ,OAAO,2BAAKF,GAAZ,IAAmBD,MAAOE,EAAOE,UACnC,QACE,OAAOH,IAKb,SAASI,IACP,OAAO,SAAAC,GACLC,IAAMC,IAAI,UAAUC,MAAK,SAAAC,GACvBJ,EAAS,CACPH,KAtBU,iBAuBVC,QAASM,EAAKC,WAyCf,SAASC,IACd,IAAMN,EAAWO,cACXb,EAAQc,aAAY,SAAAC,GAAQ,OAAIA,EAASC,UAAUhB,SASzD,OAJAiB,qBAAU,WACRX,EAASD,OACR,IAEI,CAAEL,QAAOkB,IARJ,SAAAC,GAAI,OAAIb,EAtCtB,SAAiBa,GACf,OAAO,SAAAb,GACLC,IAAMa,KAAK,SAAU,CAAED,OAAME,OAAQ,WAAYZ,MAAK,SAAAC,GACpDJ,EAASD,SAmCgBiB,CAAQH,KAQhBI,IAPT,SAAAC,GAAE,OAAIlB,EA/BpB,SAAoBkB,GAClB,OAAO,SAAAlB,GACLC,IAAMkB,OAAO,UAAYD,GAAIf,MAAK,SAAAC,GAChCJ,EAASD,SA4BcqB,CAAWF,KAOZG,OANX,SAAAH,GAAE,OAAIlB,EAxBvB,SAAoBkB,GAClB,OAAO,SAAAlB,GACLC,IAAMC,IAAI,UAAYgB,GAAIf,MAAK,SAAAC,GAET,cADPA,EAAKC,KACTU,OACPd,IAAMqB,MAAM,UAAYJ,EAAI,CAAEH,OAAQ,WAAYZ,MAAK,SAAAC,GACrDJ,EAASD,QAGXE,IAAMqB,MAAM,UAAYJ,EAAI,CAAEH,OAAQ,cAAeZ,MAAK,SAAAC,GACxDJ,EAASD,YAcawB,CAAWL,MCvE3C,IAAMM,EAAmBC,OAAOC,sCAAwCC,IAClEC,EAAcC,YAAgBC,GAC9BC,EAAWP,EAAiBQ,YAAgBC,MAInCC,EAFDC,YAAYP,EAAaG,G,QCJxB,G,MAAA,SAAAK,GAAU,IAAD,EACc9B,IAA5BZ,EADc,EACdA,MAAOkB,EADO,EACPA,IAAKK,EADE,EACFA,IAAKI,EADH,EACGA,OADH,EAEEgB,mBAAS,IAFX,mBAEfC,EAFe,KAETC,EAFS,KAYtB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,QACb,0BAAMC,SAXZ,SAAsBC,GACpBA,EAAEC,iBAEF/B,EAAI0B,GAEJC,EAAQ,MAOF,2BACErB,GAAG,UACHrB,KAAK,OACL+C,SAAU,SAAAF,GAAC,OAAIH,EAAQG,EAAEG,OAAOC,QAChCC,YAAY,yBACZD,MAAOR,MAIb,yBAAKE,UAAU,cACb,wBAAIA,UAAU,QACX9C,EAAMsD,KAAI,SAAAV,GAAI,OACb,wBACEW,IAAK,OAASX,EAAKpB,GACnBsB,UAA2B,cAAhBF,EAAKvB,OAAyB,YAAc,GACvDmC,QAAS,SAAAR,GAAC,OAAIrB,EAAOiB,EAAKpB,MAE1B,2BAAOsB,UAAU,WAAW3C,KAAK,aAChCyC,EAAKzB,KANR,IAMc,4BAAQqC,QAAS,SAAAR,GAAC,OAAIzB,EAAIqB,EAAKpB,MAA/B,cChCX,WAAAkB,GACb,OACE,kBAAC,IAAD,CAAUF,MAAOiB,GACf,kBAAC,EAAD,QCGcC,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5D,MAAK,SAAA6D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.99386530.chunk.js","sourcesContent":["// 1. imports\r\nimport axios from \"axios\"\r\nimport { useEffect } from \"react\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\n\r\n// 2. action definitions\r\nconst GET_ITEMS = \"item/GET_ITEMS\"\r\n\r\n// 3. initial state\r\nconst initialState = {\r\n  items: []\r\n}\r\n\r\n// 4. reducer (default export)\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_ITEMS:\r\n      return { ...state, items: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n//5. action creators\r\nfunction getItems() {\r\n  return dispatch => {\r\n    axios.get(\"/items\").then(resp => {\r\n      dispatch({\r\n        type: GET_ITEMS,\r\n        payload: resp.data\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nfunction addItem(text) {\r\n  return dispatch => {\r\n    axios.post(\"/items\", { text, status: \"active\" }).then(resp => {\r\n      dispatch(getItems())\r\n    })\r\n  }\r\n}\r\n\r\nfunction deleteItem(id) {\r\n  return dispatch => {\r\n    axios.delete(\"/items/\" + id).then(resp => {\r\n      dispatch(getItems())\r\n    })\r\n  }\r\n}\r\n\r\nfunction toggleItem(id) {\r\n  return dispatch => {\r\n    axios.get(\"/items/\" + id).then(resp => {\r\n      const item = resp.data\r\n      if (item.status === \"completed\") {\r\n        axios.patch(\"/items/\" + id, { status: \"active\" }).then(resp => {\r\n          dispatch(getItems())\r\n        })\r\n      } else {\r\n        axios.patch(\"/items/\" + id, { status: \"completed\" }).then(resp => {\r\n          dispatch(getItems())\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// 6. custom hook (named export)\r\n\r\nexport function useItems() {\r\n  const dispatch = useDispatch()\r\n  const items = useSelector(appState => appState.itemState.items)\r\n  const add = text => dispatch(addItem(text))\r\n  const del = id => dispatch(deleteItem(id))\r\n  const toggle = id => dispatch(toggleItem(id))\r\n\r\n  useEffect(() => {\r\n    dispatch(getItems())\r\n  }, [])\r\n\r\n  return { items, add, del, toggle }\r\n}\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport * as reducers from \"./ducks\"\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst rootReducer = combineReducers(reducers)\r\nconst enhancer = composeEnhancers(applyMiddleware(thunk))\r\n\r\nconst store = createStore(rootReducer, enhancer)\r\n\r\nexport default store\r\n","import React, { useState } from \"react\"\r\nimport { useItems } from \"../hooks/index.js\"\r\nimport \"../styles/Items.css\"\r\n\r\nexport default props => {\r\n  const { items, add, del, toggle } = useItems()\r\n  const [item, setItem] = useState(\"\")\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    add(item)\r\n\r\n    setItem(\"\")\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"form\">\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            id=\"taskbox\"\r\n            type=\"text\"\r\n            onChange={e => setItem(e.target.value)}\r\n            placeholder=\"Insert to-do items ...\"\r\n            value={item}\r\n          />\r\n        </form>\r\n      </div>\r\n      <div className=\"everything\">\r\n        <ul className=\"list\">\r\n          {items.map(item => (\r\n            <li\r\n              key={\"item\" + item.id}\r\n              className={item.status === \"completed\" ? \"completed\" : \"\"}\r\n              onClick={e => toggle(item.id)}\r\n            >\r\n              <input className=\"checkbox\" type=\"checkbox\" />\r\n              {item.text} <button onClick={e => del(item.id)}>X</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport Store from \"../redux/store\"\r\nimport Items from \"./Items\"\r\nimport { useItems } from \"../hooks\"\r\nimport { Provider } from \"react-redux\"\r\n\r\nexport default props => {\r\n  return (\r\n    <Provider store={Store}>\r\n      <Items />\r\n    </Provider>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\")\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\")\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister()\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./styles/base.css\"\r\nimport App from \"./components/App\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}